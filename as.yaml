AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: ""
Resources:
    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "spam-mail12"
            VersioningConfiguration: 
                Status: "Enabled"

    SageMakerModel:
        Type: "AWS::SageMaker::Model"
        Properties:
            ModelName: "sms-spam-classifier-mxnet-2021-12-15-00-39-37-747abhi"
            PrimaryContainer: 
                Environment: 
                    SAGEMAKER_CONTAINER_LOG_LEVEL: "20"
                    SAGEMAKER_PROGRAM: "sms_spam_classifier_mxnet_script.py"
                    SAGEMAKER_REGION: !Ref AWS::Region
                    SAGEMAKER_SUBMIT_DIRECTORY: "s3://spam-mail/sms-spam-classifier/code/sms-spam-classifier-mxnet-2021-12-15-00-35-53-205/source/sourcedir.tar.gz"
                ModelDataUrl: "s3://spam-mail/sms-spam-classifier/output/sms-spam-classifier-mxnet-2021-12-15-00-35-53-205/output/model.tar.gz"
                Image: !Sub "520713654638.dkr.ecr.${AWS::Region}.amazonaws.com/sagemaker-mxnet:1.0-cpu-py3"
            ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/AmazonSageMaker-ExecutionRole-20211211T192007"

    SageMakerEndpoint:
        Type: "AWS::SageMaker::Endpoint"
        Properties:
            EndpointName: "sms-spam-classifier-mxnet-2021-12-15-00-39-37-747abhi"
            EndpointConfigName: "sms-spam-classifier-mxnet-2021-12-15-00-39-37-747"

    SageMakerNotebookInstance:
        Type: "AWS::SageMaker::NotebookInstance"
        Properties:
            NotebookInstanceName: "spam-mailabhi123"
            InstanceType: "ml.t2.medium"
            RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/AmazonSageMaker-ExecutionRole-20211211T192007"
            DirectInternetAccess: "Enabled"
            VolumeSizeInGB: 5
            RootAccess: "Enabled"

    S3Bucket2:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "test11-cc12"
            

    S3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket2
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Sid: "AllowSESPuts-1639443704406"
                    Effect: "Allow"
                    Principal: 
                        Service: "ses.amazonaws.com"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket2}/*"
                    Condition: 
                        StringEquals: 
                            "AWS:SourceAccount": !Ref AWS::AccountId
                        StringLike: 
                            "AWS:SourceArn": "arn:aws:ses:*"

    S3BucketPolicy2:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Sid: "Statement12"
                    Effect: "Allow"
                    Principal: 
                        Service: "sagemaker.amazonaws.com"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
                    Condition: 
                        StringEquals: 
                            "AWS:SourceAccount": !Ref AWS::AccountId
    SESReceiptRule:
        Type: "AWS::SES::ReceiptRule"
        Properties:
            Rule: 
                ScanEnabled: true
                Recipients: 
                  - "theaireview.com"
                Actions: 
                  - 
                    S3Action: 
                        BucketName: !Ref S3Bucket2
                Enabled: true
                Name: "test11"
                TlsPolicy: "Optional"
            RuleSetName: "test122"

    SESReceiptRuleSet:
        Type: "AWS::SES::ReceiptRuleSet"
        Properties:
            RuleSetName: "test122"

    LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: "An Amazon S3 trigger that retrieves metadata for the object that has been updated."
            FunctionName: "spam-detect12"
            Handler: "lambda_function.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                ZipFile: |
                 import string
                 import sys
                 import numpy as np

                 from hashlib import md5

                 if sys.version_info < (3,):
                    maketrans = string.maketrans
                 else:
                    maketrans = str.maketrans
    
                 def vectorize_sequences(sequences, vocabulary_length):
                    results = np.zeros((len(sequences), vocabulary_length))
                    for i, sequence in enumerate(sequences):
                        results[i, sequence] = 1. 
                    return results

                 def one_hot_encode(messages, vocabulary_length):
                    data = []
                    for msg in messages:
                        temp = one_hot(msg, vocabulary_length)
                        data.append(temp)
                    return data

                 def text_to_word_sequence(text,
                          filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',
                          lower=True, split=" "):
    
                          if lower:
                            text = text.lower()

                          if sys.version_info < (3,):
                                if isinstance(text, unicode):
                                    translate_map = dict((ord(c), unicode(split)) for c in filters)
                                    text = text.translate(translate_map)
                                elif len(split) == 1:
                                    translate_map = maketrans(filters, split * len(filters))
                                    text = text.translate(translate_map)
                                else:
                                    for c in filters:
                                        text = text.replace(c, split)
                          else:
                                translate_dict = dict((c, split) for c in filters)
                                translate_map = maketrans(translate_dict)
                                text = text.translate(translate_map)

                          seq = text.split(split)
                          return [i for i in seq if i]

                 def one_hot(text, n,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split=' '):
    
                        return hashing_trick(text, n,
                         hash_function='md5',
                         filters=filters,
                         lower=lower,
                         split=split)


                 def hashing_trick(text, n,hash_function=None,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split=' '):
    
                        if hash_function is None:
                                hash_function = hash
                        elif hash_function == 'md5':
                                hash_function = lambda w: int(md5(w.encode()).hexdigest(), 16)

                        seq = text_to_word_sequence(text,
                                filters=filters,
                                lower=lower,
                                split=split)
                        return [int(hash_function(w) % (n - 1) + 1) for w in seq]
                 import json
                 import boto3
                 import email
                 import sms_spam_classifier_utilities as utilities


                 def lambda_handler(event, context):
                    print(event)
                    bucket = event['Records'][0]['s3']['bucket']['name']
                    key = event['Records'][0]['s3']['object']['key']

                    session = boto3.Session()
                    s3_session = session.client('s3')
                    response = s3_session.get_object(Bucket=bucket, Key=key)

                    email_obj = email.message_from_bytes(response['Body'].read())
    
                    from_email = email_obj.get('From')
                    body = email_obj.get_payload()[0].get_payload()
                    print("body")
                    print(body)
                    print("from_email")
                    print(from_email)
                    # train_url = 'https://runtime.sagemaker.us-east-1.amazonaws.com/endpoints/sms-spam-classifier-mxnet-2021-04-29-12-28-48-519/invocations'
                    endpoint_name = 'sms-spam-classifier-mxnet-2021-12-15-00-39-37-747'
                    runtime = session.client('runtime.sagemaker')
                    vocabulary_length = 9013
                    input_mail = [body.strip()]
                    print(input_mail)
                    temp_1 = utilities.one_hot_encode(input_mail, vocabulary_length)
                    input_mail = utilities.vectorize_sequences(temp_1, vocabulary_length)
                    print(input_mail)
                    data = json.dumps(input_mail.tolist())
                    response = runtime.invoke_endpoint(EndpointName=endpoint_name, ContentType='application/json', Body=data)
                    print(response)
                    res = json.loads(response["Body"].read())

                    if res['predicted_label'][0][0] == 0:
                        label = 'Ok'
                    else:
                        label = 'Spam'
                    score = round(res['predicted_probability'][0][0], 4)
                    score = score*100


                    message = "We received your email sent at " + str(email_obj.get('To')) + " with the subject " + str(email_obj.get('Subject')) + ".\nHere \
                    is a 240 character sample of the email body:\n\n" + body[:240] + "\nThe email was \
                    categorized as " + str(label) + " with a " + str(score) + "% confidence."

                    print("message")
                    print(message)
                    email_client = session.client('ses')
                    response_email = email_client.send_email(
                    Destination={'ToAddresses': [from_email]},
                    Message={
                    'Body': {
                    'Text': {
                    'Charset': 'UTF-8',
                    'Data': message,
                    },
                    },
                    'Subject': {
                    'Charset': 'UTF-8',
                    'Data': 'Spam analysis of your email',
                    },
                    },
                    Source=str(email_obj.get('To')),
                    )
                    print(response_email)
                    return {}
               
            MemorySize: 128
            Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/my-s3-function-role"
            Runtime: "python3.7"
            Timeout: 3
            TracingConfig: 
                Mode: "PassThrough"
            Layers: 
              - !Sub "arn:aws:lambda:${AWS::Region}:420165488524:layer:AWSLambda-Python37-SciPy1x:113"
            Tags: 
              - 
                Key: "lambda-console:blueprint"
                Value: "s3-get-object-python"


